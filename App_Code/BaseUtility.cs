using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using Microsoft.ApplicationBlocks.Data;
using System.Data.SqlClient;
using System.Data;
using System.Web.Security;
using System.Configuration;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Text.RegularExpressions;
using System.Text;
using System.Web.Script.Serialization;
using System.Globalization;
using System.Net;
using System.IO;


public static class BaseUtility
{
    public static void UpdateLastActivityDate(string UserName)
    {
        SqlHelper.ExecuteNonQuery(new SqlConnection(WebsiteConfig.ConnectionString),
            CommandType.StoredProcedure,
            "all_UpdateLastActivityDate",
            new SqlParameter("@UserName", UserName)
            );
    }

    public static DataSet GetSettings(string userId, int appId, string skeys)
    {
        DataSet ds = SqlHelper.ExecuteDataset(new SqlConnection(WebsiteConfig.ConnectionString),
            CommandType.StoredProcedure,
            "all_GetSettings",
            new SqlParameter("@userId", userId),
            new SqlParameter("@appId", appId),
            new SqlParameter("@skeys", skeys));
        return ds;
    }

    public static DataSet SetSettings(string userId, int appId, string skey, string svalue)
    {
        DataSet ds = SqlHelper.ExecuteDataset(new SqlConnection(WebsiteConfig.ConnectionString),
            CommandType.StoredProcedure,
            "all_SetSettings",
            new SqlParameter("@userId", userId),
            new SqlParameter("@appId", appId),
            new SqlParameter("@skey", skey),
            new SqlParameter("@svalue", svalue));
        return ds;
    }



    /// <summary>
    /// Auto unlocks locked user account after autoUnlockTimeout time from web.config
    /// </summary>
    /// <param name="username"></param>
    /// <returns></returns>
    public static bool AutoUnlockUser(string username)
    {
        MembershipUser mu = Membership.GetUser(username, false);
        if ((mu != null) && (mu.IsLockedOut) &&
         (mu.LastLockoutDate.ToUniversalTime().AddMinutes(Convert.ToDouble(ConfigurationManager.AppSettings["autoUnlockTimeout"])) < DateTime.UtcNow))
        {
            bool retval = mu.UnlockUser();
            if (retval)
                return true;
            else
                return false; //something went wrong with the unlock
        }
        else
            return false; //not locked out in the first place
        //or still in lockout period
    }



    // Configures what button to be clicked when the uses presses Enter in a 
    // textbox. The text box doesn't have to be a TextBox control, but it must 
    // be derived from either HtmlControl or WebControl, and the HTML control it 
    // generates should accept an 'onkeydown' attribute. The HTML generated by 
    // the button must support the 'Click' event
    public static void TieButton(Page page, Control TextBoxToTie, Control ButtonToTie)
    {
        // Init jscript
        string jsString = "";

        // Check button type and get required jscript
        if (ButtonToTie is LinkButton)
        {
            jsString = "if ((event.which && event.which == 13) || (event.keyCode && event.keyCode == 13)) {"
                + page.ClientScript.GetPostBackEventReference(ButtonToTie, "").Replace(":", "$") + ";return false;} else return true;";
        }
        else if (ButtonToTie is ImageButton)
        {
            jsString = "if ((event.which && event.which == 13) || (event.keyCode && event.keyCode == 13)) {"
                + page.ClientScript.GetPostBackEventReference(ButtonToTie, "").Replace(":", "$") + ";return false;} else return true;";
        }
        else
        {
            jsString = "if ((event.which && event.which == 13) || (event.keyCode && event.keyCode == 13)) {document."
                + "forms[0].elements['" + ButtonToTie.UniqueID.Replace(":", "_") + "'].click();return false;} else return true; ";
        }

        // Attach jscript to the onkeydown attribute - we have to cater for HtmlControl or WebControl
        if (TextBoxToTie is HtmlControl)
        {
            ((HtmlControl)TextBoxToTie).Attributes.Add("onkeydown", jsString);
        }
        else if (TextBoxToTie is WebControl)
        {
            ((WebControl)TextBoxToTie).Attributes.Add("onkeydown", jsString);
        }
    }


    #region Data and data type
    /// <summary>
    /// This funciton check whether suplied string value is a date
    /// </summary>
    /// <param name="strDate"></param>
    /// <returns></returns>
    public static bool isDate(string strDate)
    {
        DateTime dt;

        if (DateTime.TryParse(strDate, out dt))
        {
            //--- is a valid date now check if it is in the correct date range
            //--- Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM
            if (dt >= DateTime.Parse("1/1/1800") && dt <= DateTime.Parse("1/1/9990"))
                return true;
            else
                return false;
        }
        else
            return false;
    }

    public static bool isDate(string strDate, string format)
    {
        DateTime dt;

        if (DateTime.TryParseExact(strDate, format, null, DateTimeStyles.None, out dt))
        {
            //--- is a valid date now check if it is in the correct date range
            //--- Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM
            if (dt >= DateTime.Parse("1/1/1800") && dt <= DateTime.Parse("1/1/9990"))
                return true;
            else
                return false;
        }
        else
            return false;
    }


    public static DateTime? parseDate(string strDate, string format)
    {
        DateTime dt;

        if (DateTime.TryParseExact(strDate, format, null, DateTimeStyles.None, out dt))
            return dt;
        else
            return null;
    }


    public static bool isNumeric(object ValueToCheck)
    {
        double Dummy = 0;
        return double.TryParse(ValueToCheck.ToString(), System.Globalization.NumberStyles.Any, null, out Dummy);
    }

    public static DateTime GetLastDayOfMonth(DateTime currentDate)
    {
        int monthNumber, yearNumber;
        if (currentDate.Month == 12)
        {
            monthNumber = 1;
            yearNumber = currentDate.Year + 1;
        }
        else
        {
            monthNumber = currentDate.Month + 1;
            yearNumber = currentDate.Year;
        }
        DateTime lastDate = new DateTime(yearNumber, monthNumber, 1);
        lastDate = lastDate.AddDays(-1);
        return lastDate;
    }

    public static string CreateDropDownRows(string DataTextField, string DataValueField, DataTable dt)
    {
        string dropDownRows = "";
        foreach (DataRow row in dt.Rows)
        {
            dropDownRows += "<option value=\"" + row[DataValueField].ToString() + "\">" + row[DataTextField].ToString() + "</option>";
        }
        return dropDownRows;
    }
    public static string ConvertNumberToHex(int number)
    {
        return number.ToString("X").ToLower();
    }
    public static int ConvertHexToNumber(string hexValue)
    {
        return int.Parse(hexValue, System.Globalization.NumberStyles.HexNumber);
    }
    public static string ConvertToFilesizeText(double valueInBytes)
    {
        if (valueInBytes < 1024)
            return valueInBytes + " bytes";
        else if (valueInBytes < (1024 * 1024))
            return Math.Round(valueInBytes / 1024, 1) + " KB";
        else
            return Math.Round(valueInBytes / (1024 * 1024), 1) + " MB";
    }
    #endregion

    #region ListItem
    public static string newListItemSepString
    {
        get { return "------------"; }
    }
    public static ListItem newListItem(string text, string value)
    {
        return newListItem(text, value, 0, "");
    }
    public static ListItem newListItem(string text, string value, string options)
    {
        return newListItem(text, value, 0, options);
    }
    public static ListItem newListItem(string text, string value, int indent)
    {
        return newListItem(text, value, indent, "");
    }
    public static ListItem newListItem(string text, string value, int indent, string options)
    {
        int ntimes = 3; // 1 indent ammount is 3 spaces
        int n = indent * ntimes;
        string ch = "";

        for (int i = 0; i < n; i++)
            ch += "&nbsp;";


        ListItem itm = new ListItem();

        //---- setup options
        string[] opts = { };
        if (!string.IsNullOrEmpty(options))
            opts = options.Split(',');
        foreach (string op in opts)
        {
            if (op.Trim().ToLower() == "b")
                itm.Attributes["style"] += "font-weight:bold;";
            else if (op.Trim().ToLower() == "i")
                itm.Attributes["style"] += "font-style:italic;";
            else if (op.Trim().ToLower() == "d")
                itm.Attributes.Add("disabled", "disabled");
        }

        itm.Text = HttpUtility.HtmlDecode(ch) + text;
        itm.Value = value;
        return itm;
    }

    /// <summary>
    /// Tree like sub item arrow
    /// </summary>
    /// <param name="level"></param>
    /// <param name="excludedToptRow"></param>
    /// <returns></returns>
    public static string SubItemArrow(int level, bool excludedToptRow)
    {
        string ch = "";
        if (excludedToptRow)
            level = level - 1;
        int n = 0;
        if (level > 1)
            n = level * 4;
        for (int i = 0; i < n; i++)
            ch += "&nbsp;";

        if (level > 0)
            ch += "<img src='/images/icon16/tree_sub_item_gray_arrow.png' />";
        return ch;
    }
    #endregion

    #region String Formats

    /// <summary>
    /// Converts double quot mark to &quot;
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    public static string RefineTextToHtml(string text)
    {
        return text.Replace("\"", "&quot;");
    }

    public static string CensorStr(string naughtyString)
    {
        string goodString = naughtyString;

        goodString = Regex.Replace(goodString, "sex", "s*x", RegexOptions.IgnoreCase);
        goodString = Regex.Replace(goodString, "fuck", "f*ck", RegexOptions.IgnoreCase);


        //--- Change color of hidden text to a dark color
        // brown category
        goodString = Regex.Replace(goodString, "color=#f5f5dc", "color=#a52a2a", RegexOptions.IgnoreCase);
        goodString = Regex.Replace(goodString, "color=#deb887", "color=#a52a2a", RegexOptions.IgnoreCase);
        // white
        goodString = Regex.Replace(goodString, "color=#ffffff", "color=#000000", RegexOptions.IgnoreCase);
        goodString = Regex.Replace(goodString, "color=#d3d3d3", "color=#808080", RegexOptions.IgnoreCase);
        goodString = Regex.Replace(goodString, "color=#a9a9a9", "color=#808080", RegexOptions.IgnoreCase);
        // yellow
        goodString = Regex.Replace(goodString, "color=#ffff00", "color=#ffa500", RegexOptions.IgnoreCase);
        // pink category
        goodString = Regex.Replace(goodString, "color=#ee82ee", "color=#ff1493", RegexOptions.IgnoreCase);
        goodString = Regex.Replace(goodString, "color=#ffc0cb", "color=#ff1493", RegexOptions.IgnoreCase);

        // make all the url no follow
        goodString = Regex.Replace(goodString, "<a ", "<a rel=\"nofollow\" ", RegexOptions.IgnoreCase);
        return goodString;
    }

    public static string MakeLink(string txt)
    {
        //Regex regx = new Regex(@"http(s)?://([\w+?\.\w+])+([a-zA-Z0-9\~\!\@\#\$\%\^\&amp;\*\(\)_\-\=\+\\\/\?\.\:\;\'\,]*)?", RegexOptions.IgnoreCase); 
        Regex regx = new Regex(@"(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$={}#_]*)?", RegexOptions.IgnoreCase);

        MatchCollection mactches = regx.Matches(txt);

        foreach (Match match in mactches)
        {
            txt = txt.Replace(match.Value, "<a href=\"" + match.Value + "\" target=\"_blank\" rel=\"nofollow\">" + match.Value + "</a>");
        }

        return txt;
    }

    public static string RefineUrl(string url)
    {
        UriBuilder uri;
        try
        {
            uri = new UriBuilder(url);
        }
        catch
        {
            return ""; // not a valid url
        }

        return uri.Uri.ToString();
    }


    public static string GetQueryStringValue(string url, string querystring)
    {
        //-- take only the query string part
        int qp = url.IndexOf("?");
        if (qp >= 0)
        {
            url = url.Substring(qp + 1); // +1 to exclude ? mark
        }

        //-- now add & to similarize the first query sting to all others
        url = "&" + url;

        //-- search for the querystirng
        int sp = url.IndexOf("&" + querystring + "=", StringComparison.CurrentCultureIgnoreCase);
        string qv = "";
        if (sp >= 0)
        {
            qv = url.Substring(sp + querystring.Length + 2); // add querystring length and 2 for & and =
            int ep = qv.IndexOf("&");
            if (ep > 0)
            {
                qv = qv.Substring(0, ep);
            }
            return qv;
        }
        else
            return "";
    }

    public static string UrlExcludeQueryString(string url)
    {
        if (url.IndexOf("?") > 0)
            return url.Substring(0, url.IndexOf("?"));
        else
            return url;
    }

    public static string StripHTML(string htmlString)
    {
        //This pattern Matches everything found inside html tags;
        //(.|\n) - > Look for any character or a new line
        // *?  -> 0 or more occurences, and make a non-greedy search meaning
        //That the match will stop at the first available '>' it sees, and not at the last one
        //(if it stopped at the last one we could have overlooked 
        //nested HTML tags inside a bigger HTML tag..)
        // Thanks to Oisin and Hugh Brown for helping on this one...
        string pattern = @"<(.|\n)*?>";
        string ret = Regex.Replace(htmlString, pattern, string.Empty);
        ret = ret.Replace("<", "");
        ret = ret.Replace(">", "");
        return ret;
    }
    public static string StripHTML(string htmlString, bool retainBreak)
    {
        //This pattern Matches everything found inside html tags;
        //(.|\n) - > Look for any character or a new line
        // *?  -> 0 or more occurences, and make a non-greedy search meaning
        //That the match will stop at the first available '>' it sees, and not at the last one
        //(if it stopped at the last one we could have overlooked 
        //nested HTML tags inside a bigger HTML tag..)
        // Thanks to Oisin and Hugh Brown for helping on this one...
        htmlString = htmlString.Replace("</p>", "[br][br]");
        htmlString = htmlString.Replace("<br />", "[br]");
        string pattern = @"<(.|\n)*?>";
        string ret = Regex.Replace(htmlString, pattern, string.Empty);
        ret = ret.Replace("<", "");
        ret = ret.Replace(">", "");
        ret = ret.Replace("[br]", "<br />");
        return ret;
    }

    public static string NewRandomPassword()
    {
        int passLength = 4;

        string allowedChars = "";
        allowedChars = "abcdefghijkmnpqrstuvwxyz";
        //allowedChars += "ABCDEFGHJKLMNPQRSTUVWXYZ";
        //allowedChars += "23456789";
        //allowedChars += "!@#$%&?";

        string passwordString = NewRandomPassword(passLength, allowedChars);
        return passwordString;
    }

    public static string NewRandomPassword(int passLength, string allowedChars)
    {
        string passwordString = "";
        string temp = "";
        int pos = 0;
        int len = allowedChars.Length;
        Random rand = new Random();
        for (int i = 0; i < passLength; i++)
        {
            pos = rand.Next(0, len);
            temp = allowedChars.Substring(pos, 1);
            passwordString += temp;
        }
        return passwordString;
    }

    public static string Reverse(this string input)
    {
        // TODO - once sober change this to use half as many input steps
        char[] result = new char[input.Length];

        for (int i = 0; i < input.Length; i++)
        {
            result[i] = input[input.Length - i - 1];
        }

        return new string(result);
    }

    public static bool IsNullEmptyTrimmed(this string str)
    {
        if (string.IsNullOrEmpty(str))
        {
            return true;
        }

        return str.Trim().Length == 0;
    }

    public static string FormatTextToUrl(object text)
    {
        string ret = Convert.ToString(text).Trim().ToLower();
        ret = ret.Replace(" ", "-");
        ret = ret.Replace("\"", "");
        ret = ret.Replace("/", "");
        ret = ret.Replace("&", "-");
        ret = ret.Replace("#", "-");
        ret = ret.Replace("{", "");
        ret = ret.Replace("}", "");
        ret = ret.Replace("(", "");
        ret = ret.Replace(")", "");
        ret = ret.Replace("[", "");
        ret = ret.Replace("]", "");
        ret = ret.Replace("%", "");
        ret = ret.Replace("\\", "");
        ret = ret.Replace("?", "");
        ret = ret.Replace("‘", "");
        ret = ret.Replace("’", "");
        ret = ret.Replace(".", "");
        ret = ret.Replace(":", "");
        ret = ret.Replace("--", "-");
        ret = ret.Replace("--", "-");

        return ret;
    }
    #endregion

    #region authKey
    /// <summary>
    /// Create user auth key: a 5 chars long used to wraped with iuserid so that iuser id does not look like a number
    /// </summary>
    /// <returns></returns>
    public static string AuthKeyCreateNew()
    {
        return NewRandomPassword(5, "23456789abcdefhknsuvwxz23456789");
    }
    public static string AuthKeyAttachId(string id, string authKey)
    {
        if (authKey.Length == 5)
            return authKey.Substring(0, 3) + id + authKey.Substring(3);
        else
            return id;
    }

    public static string AuthKeyGetId(string authKeyWithId)
    {
        string id = "";
        id = authKeyWithId.Substring(3);
        id = id.Substring(0, id.Length - 2);
        return id;
    }
    #endregion

    #region Json
    public static string GetJSONString(DataTable dt)
    {
        StringBuilder objSb = new StringBuilder();
        JavaScriptSerializer objSer = new JavaScriptSerializer();

        List<Dictionary<string, object>> resultMain = new List<Dictionary<string, object>>();
        foreach (DataRow dr in dt.Rows)
        {
            Dictionary<string, object> drow = new Dictionary<string, object>();
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                //if (dt.Columns[i].DataType == System.Type.GetType("System.String"))
                //    drow.Add(dt.Columns[i].ColumnName, dr[i].ToString().Replace("\"", "&quot;").Replace("\t", "\\t").Replace("\r\n", "<br />"));  // &quot;  // \u0022
                //else
                drow.Add(dt.Columns[i].ColumnName, dr[i]);
            }
            resultMain.Add(drow);
        }


        string jsonString = objSer.Serialize(resultMain);
        return jsonString;
    }
    #endregion

    #region webservice helper
    public static string AcquireHTML(string address)
    {
        HttpWebRequest request;
        HttpWebResponse response = null;
        StreamReader reader;
        StringBuilder sbSource;

        try
        {
            // Create and initialize the web request  
            request = System.Net.WebRequest.Create(address) as HttpWebRequest;
            request.KeepAlive = false;
            request.Headers.Set("Accept-Language", "en");
            request.Timeout = 30 * 1000;

            // Get response  
            response = request.GetResponse() as HttpWebResponse;

            if (response != null && request.HaveResponse == true)
            {
                // Get the response stream  
                reader = new StreamReader(response.GetResponseStream());
                // Read it into a StringBuilder  
                sbSource = new StringBuilder(reader.ReadToEnd());
                response.Close();
                return sbSource.ToString();
            }
            else
                return "";
        }
        catch (Exception ex)
        {
            if (response != null)
                response.Close();
            return "";
        }
    }

    public static void DownloadFile(string address, string destination)
    {
        using (WebClient client = new WebClient())
        {
            client.DownloadFile(address, destination);
        }
    }

    #endregion
}